name: Continuous Integration

on:
  pull_request:

jobs:
  validate-python:
    name: Validate Python
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Python setup
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Python requirements
        run: pip install -r requirements.txt

      - name: Python linter
        uses: py-actions/flake8@v1
        with:
          ignore: "E501"
          path: "api"

      - name: Python unit tests
        run: pytest

  validate-docker-and-k8s:
    name: Validate Docker and Kubernetes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Dockerfile validation
        uses: hadolint/hadolint-action@master
        with:
            dockerfile: Dockerfile

      - name: Kubernetes manifests validation
        uses: instrumenta/kubeval-action@master
        with:
          files: k8s/*

  validate-terraform:
    name: Validate Terraform
    runs-on: ubuntu-latest
    needs: validate-code
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform init
        id: init
        run: terraform init
      
      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update PR with plan details
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Make workflow fail if plan failed
        if: steps.plan.outcome == 'failure'
        run: exit 1