name: "CI/CD"

on:
  push:
    branches:
      - main
  pull_request:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  IMAGE_NAME: ${{ secrets.GCP_IMAGE_NAME }}

jobs:
  docker:
    name: Docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup gcloud
      uses: google-github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: $PROJECT_ID
        export_default_credentials: true

    - name: Configure docker with gcloud
      run: gcloud --quiet auth configure-docker
      
    - name: Build the docker image
      run: docker build -f Dockerfile --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA" .

    - name: Publish docker image to container registry
      run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA"
  
  # terraform:
  #   name: "Terraform"
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: terraform
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Terraform Setup
  #       uses: hashicorp/setup-terraform@v1
  #       with:
  #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

  #     - name: Terraform Format
  #       id: fmt
  #       run: terraform fmt -check

  #     - name: Terraform Init
  #       id: init
  #       run: terraform init
      
  #     - name: Terraform Validate
  #       id: validate
  #       run: terraform validate -no-color

  #     - name: Terraform Plan
  #       id: plan
  #       if: github.event_name == 'pull_request'
  #       run: terraform plan -no-color
  #       continue-on-error: true

  #     - uses: actions/github-script@0.9.0
  #       if: github.event_name == 'pull_request'
  #       env:
  #         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
  #           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
  #           #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
  #           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  #           <details><summary>Show Plan</summary>
  #           \`\`\`\n
  #           ${process.env.PLAN}
  #           \`\`\`
  #           </details>
  #           *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
  #           github.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })
  #     - name: Terraform Plan Status
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1

  #     - name: Terraform Apply
  #       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #       run: terraform apply -auto-approve